name: Deploy MkDocs to GitHub Pages # 工作流程的名称

on:
  push:
    branches:
      - main # 指定当代码 push 到 main 分支时触发工作流程
      # 如果您的主分支名称不是 main，请修改此处，例如 master

jobs:
  deploy: # 作业的 ID
    runs-on: ubuntu-latest # 指定作业运行在最新的 Ubuntu 虚拟环境上

    permissions:
      contents: read # 允许读取仓库内容
      pages: write # 允许写入 GitHub Pages 的部署
      id-token: write # 允许获取 OIDC token，用于部署到 Pages

    environment:
      name: github-pages # 指定部署到 GitHub Pages 环境
      url: ${{ steps.deployment.outputs.page_url }} # 从部署步骤获取 Pages URL

    steps:
      - name: Checkout code # 步骤名称：拉取代码
        uses: actions/checkout@v4 # 使用 actions/checkout Action，拉取仓库代码到虚拟环境

      - name: Setup Python environment # 步骤名称：设置 Python 环境
        uses: actions/setup-python@v5 # 使用 actions/setup-python Action
        with:
          python-version: '3.x' # 指定使用的 Python 版本，例如 3.x 表示最新的 Python 3 版本
          cache: pip # 缓存 pip 依赖，加速构建

      - name: Install dependencies # 步骤名称：安装依赖
        run: | # 运行多行命令
          python -m pip install --upgrade pip # 升级 pip
          pip install mkdocs mkdocs-material # 安装 MkDocs 和 Material 主题 (如果使用的话)
          # 如果您使用了其他主题或插件，请在此处添加安装命令

      - name: Build MkDocs site # 步骤名称：构建网站
        run: mkdocs build # 运行 mkdocs build 命令生成静态文件，默认输出到 site 目录

      - name: Setup Pages # 步骤名称：配置 GitHub Pages
        uses: actions/configure-pages@v3 # 使用 actions/configure-pages Action 配置 Pages

      - name: Upload artifact # 步骤名称：上传构建好的静态文件
        uses: actions/upload-pages-artifact@v3 # 使用 actions/upload-pages-artifact Action
        with:
          path: './site' # 指定要上传的目录，mkdocs build 默认生成在 site 目录

      - name: Deploy to GitHub Pages # 步骤名称：部署到 GitHub Pages
        id: deployment # 给这个步骤一个 ID，方便后续引用其输出
        uses: actions/deploy-pages@v4 # 使用 actions/deploy-pages Action 进行部署
        # 这个 Action 会自动从上一步上传的 artifact 中获取文件并部署